"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Camel-case the given `string`
 *
 * @param string - the string to camelcase
 */
function camelcase(string) {
  return string.split('-').reduce((str, word) => str + word[0].toUpperCase() + word.slice(1));
}
/**
 * Initialize a new [[Option]] with the given `flags` and `description`.
 *
 * @param flags
 * @param description
 */


class Option {
  constructor(flags, description) {
    _defineProperty(this, "flags", void 0);

    _defineProperty(this, "required", void 0);

    _defineProperty(this, "optional", void 0);

    _defineProperty(this, "bool", void 0);

    _defineProperty(this, "short", void 0);

    _defineProperty(this, "long", void 0);

    _defineProperty(this, "description", void 0);

    _defineProperty(this, "defaultValue", void 0);

    this.flags = flags;
    this.required = flags.includes('<');
    this.optional = flags.includes('[');
    this.bool = !flags.includes('-no-');
    const parsedFlags = flags.split(/[ ,|]+/);

    if (parsedFlags.length > 1 && !/^[[<]/.test(parsedFlags[1])) {
      this.short = parsedFlags.shift() || '';
    }

    this.long = parsedFlags.shift() || '';
    this.description = description || '';
  }
  /**
   * Return option name.
   */


  name() {
    return this.long.replace('--', '').replace('no-', '');
  }
  /**
   * Return option name, in a camelcase format that can be used
   * as a object attribute key.
   */


  attributeName() {
    return camelcase(this.name());
  }
  /**
   * Check if `arg` matches the short or long flag. Internally used to check
   * if an arg belongs to an [[Option]]
   */


  is(arg) {
    return this.short === arg || this.long === arg;
  }
  /**
   * Returns number of args that are expected by the option.
   * Can only be 0 or 1.
   */


  arity() {
    return this.required || this.optional ? 1 : 0;
  }

}

exports.default = Option;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcHRpb24udHMiXSwibmFtZXMiOlsiY2FtZWxjYXNlIiwic3RyaW5nIiwic3BsaXQiLCJyZWR1Y2UiLCJzdHIiLCJ3b3JkIiwidG9VcHBlckNhc2UiLCJzbGljZSIsIk9wdGlvbiIsImNvbnN0cnVjdG9yIiwiZmxhZ3MiLCJkZXNjcmlwdGlvbiIsInJlcXVpcmVkIiwiaW5jbHVkZXMiLCJvcHRpb25hbCIsImJvb2wiLCJwYXJzZWRGbGFncyIsImxlbmd0aCIsInRlc3QiLCJzaG9ydCIsInNoaWZ0IiwibG9uZyIsIm5hbWUiLCJyZXBsYWNlIiwiYXR0cmlidXRlTmFtZSIsImlzIiwiYXJnIiwiYXJpdHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7OztBQUtBLFNBQVNBLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQTJDO0FBQ3pDLFNBQU9BLE1BQU0sQ0FDVkMsS0FESSxDQUNFLEdBREYsRUFFSkMsTUFGSSxDQUdILENBQUNDLEdBQUQsRUFBY0MsSUFBZCxLQUErQkQsR0FBRyxHQUFHQyxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVFDLFdBQVIsRUFBTixHQUE4QkQsSUFBSSxDQUFDRSxLQUFMLENBQVcsQ0FBWCxDQUgxRCxDQUFQO0FBS0Q7QUFFRDs7Ozs7Ozs7QUFPZSxNQUFNQyxNQUFOLENBQWE7QUFpQm5CQyxFQUFBQSxXQUFQLENBQW1CQyxLQUFuQixFQUFrQ0MsV0FBbEMsRUFBdUQ7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFDckQsU0FBS0QsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0UsUUFBTCxHQUFnQkYsS0FBSyxDQUFDRyxRQUFOLENBQWUsR0FBZixDQUFoQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JKLEtBQUssQ0FBQ0csUUFBTixDQUFlLEdBQWYsQ0FBaEI7QUFDQSxTQUFLRSxJQUFMLEdBQVksQ0FBQ0wsS0FBSyxDQUFDRyxRQUFOLENBQWUsTUFBZixDQUFiO0FBQ0EsVUFBTUcsV0FBVyxHQUFHTixLQUFLLENBQUNSLEtBQU4sQ0FBWSxRQUFaLENBQXBCOztBQUNBLFFBQUljLFdBQVcsQ0FBQ0MsTUFBWixHQUFxQixDQUFyQixJQUEwQixDQUFDLFFBQVFDLElBQVIsQ0FBYUYsV0FBVyxDQUFDLENBQUQsQ0FBeEIsQ0FBL0IsRUFBNkQ7QUFDM0QsV0FBS0csS0FBTCxHQUFhSCxXQUFXLENBQUNJLEtBQVosTUFBdUIsRUFBcEM7QUFDRDs7QUFDRCxTQUFLQyxJQUFMLEdBQVlMLFdBQVcsQ0FBQ0ksS0FBWixNQUF1QixFQUFuQztBQUNBLFNBQUtULFdBQUwsR0FBbUJBLFdBQVcsSUFBSSxFQUFsQztBQUNEO0FBRUQ7Ozs7O0FBR09XLEVBQUFBLElBQVAsR0FBc0I7QUFDcEIsV0FBTyxLQUFLRCxJQUFMLENBQVVFLE9BQVYsQ0FBa0IsSUFBbEIsRUFBd0IsRUFBeEIsRUFBNEJBLE9BQTVCLENBQW9DLEtBQXBDLEVBQTJDLEVBQTNDLENBQVA7QUFDRDtBQUVEOzs7Ozs7QUFJT0MsRUFBQUEsYUFBUCxHQUErQjtBQUM3QixXQUFPeEIsU0FBUyxDQUFDLEtBQUtzQixJQUFMLEVBQUQsQ0FBaEI7QUFDRDtBQUVEOzs7Ozs7QUFJT0csRUFBQUEsRUFBUCxDQUFVQyxHQUFWLEVBQWdDO0FBQzlCLFdBQU8sS0FBS1AsS0FBTCxLQUFlTyxHQUFmLElBQXNCLEtBQUtMLElBQUwsS0FBY0ssR0FBM0M7QUFDRDtBQUVEOzs7Ozs7QUFJT0MsRUFBQUEsS0FBUCxHQUF1QjtBQUNyQixXQUFPLEtBQUtmLFFBQUwsSUFBaUIsS0FBS0UsUUFBdEIsR0FBaUMsQ0FBakMsR0FBcUMsQ0FBNUM7QUFDRDs7QUEzRHlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDYW1lbC1jYXNlIHRoZSBnaXZlbiBgc3RyaW5nYFxuICpcbiAqIEBwYXJhbSBzdHJpbmcgLSB0aGUgc3RyaW5nIHRvIGNhbWVsY2FzZVxuICovXG5mdW5jdGlvbiBjYW1lbGNhc2Uoc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc3RyaW5nXG4gICAgLnNwbGl0KCctJylcbiAgICAucmVkdWNlKFxuICAgICAgKHN0cjogc3RyaW5nLCB3b3JkOiBzdHJpbmcpID0+IHN0ciArIHdvcmRbMF0udG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSlcbiAgICApO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgW1tPcHRpb25dXSB3aXRoIHRoZSBnaXZlbiBgZmxhZ3NgIGFuZCBgZGVzY3JpcHRpb25gLlxuICpcbiAqIEBwYXJhbSBmbGFnc1xuICogQHBhcmFtIGRlc2NyaXB0aW9uXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3B0aW9uIHtcbiAgcHVibGljIGZsYWdzOiBzdHJpbmc7XG5cbiAgcHVibGljIHJlcXVpcmVkOiBib29sZWFuO1xuXG4gIHB1YmxpYyBvcHRpb25hbDogYm9vbGVhbjtcblxuICBwdWJsaWMgYm9vbDogYm9vbGVhbjtcblxuICBwdWJsaWMgc2hvcnQ6IHN0cmluZztcblxuICBwdWJsaWMgbG9uZzogc3RyaW5nO1xuXG4gIHB1YmxpYyBkZXNjcmlwdGlvbjogc3RyaW5nO1xuXG4gIHB1YmxpYyBkZWZhdWx0VmFsdWU6IHN0cmluZztcblxuICBwdWJsaWMgY29uc3RydWN0b3IoZmxhZ3M6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZykge1xuICAgIHRoaXMuZmxhZ3MgPSBmbGFncztcbiAgICB0aGlzLnJlcXVpcmVkID0gZmxhZ3MuaW5jbHVkZXMoJzwnKTtcbiAgICB0aGlzLm9wdGlvbmFsID0gZmxhZ3MuaW5jbHVkZXMoJ1snKTtcbiAgICB0aGlzLmJvb2wgPSAhZmxhZ3MuaW5jbHVkZXMoJy1uby0nKTtcbiAgICBjb25zdCBwYXJzZWRGbGFncyA9IGZsYWdzLnNwbGl0KC9bICx8XSsvKTtcbiAgICBpZiAocGFyc2VkRmxhZ3MubGVuZ3RoID4gMSAmJiAhL15bWzxdLy50ZXN0KHBhcnNlZEZsYWdzWzFdKSkge1xuICAgICAgdGhpcy5zaG9ydCA9IHBhcnNlZEZsYWdzLnNoaWZ0KCkgfHwgJyc7XG4gICAgfVxuICAgIHRoaXMubG9uZyA9IHBhcnNlZEZsYWdzLnNoaWZ0KCkgfHwgJyc7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uIHx8ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBvcHRpb24gbmFtZS5cbiAgICovXG4gIHB1YmxpYyBuYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubG9uZy5yZXBsYWNlKCctLScsICcnKS5yZXBsYWNlKCduby0nLCAnJyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIG9wdGlvbiBuYW1lLCBpbiBhIGNhbWVsY2FzZSBmb3JtYXQgdGhhdCBjYW4gYmUgdXNlZFxuICAgKiBhcyBhIG9iamVjdCBhdHRyaWJ1dGUga2V5LlxuICAgKi9cbiAgcHVibGljIGF0dHJpYnV0ZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY2FtZWxjYXNlKHRoaXMubmFtZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBgYXJnYCBtYXRjaGVzIHRoZSBzaG9ydCBvciBsb25nIGZsYWcuIEludGVybmFsbHkgdXNlZCB0byBjaGVja1xuICAgKiBpZiBhbiBhcmcgYmVsb25ncyB0byBhbiBbW09wdGlvbl1dXG4gICAqL1xuICBwdWJsaWMgaXMoYXJnOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaG9ydCA9PT0gYXJnIHx8IHRoaXMubG9uZyA9PT0gYXJnO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbnVtYmVyIG9mIGFyZ3MgdGhhdCBhcmUgZXhwZWN0ZWQgYnkgdGhlIG9wdGlvbi5cbiAgICogQ2FuIG9ubHkgYmUgMCBvciAxLlxuICAgKi9cbiAgcHVibGljIGFyaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWlyZWQgfHwgdGhpcy5vcHRpb25hbCA/IDEgOiAwO1xuICB9XG59XG4iXX0=